{"version":3,"sources":["TodoItem.js","AddTodo.js","FilterBtn.js","App.js","todosData.js","reportWebVitals.js","index.js"],"names":["TodoItem","props","useState","isBeingEdited","setBeingEdited","task","text","newText","setNewText","inputRef","useRef","buttonRef","displayTemplate","className","type","checked","completed","onChange","toggleTaskCompleted","id","onClick","deleteTask","ref","editingTemplate","defaultValue","value","e","target","preventDefault","editTask","useEffect","current","focus","AddTodo","setText","placeholder","addTask","FilterBtn","isPressed","setFilter","name","App","tasks","displayTasks","filter","FILTER_MAP","All","Active","Completed","FILTER_NAMES","Object","keys","tasksUpdated","map","todoItems","filterList","tasksRemaining","todoItemsEdited","length","newTodo","nanoid","todosData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e63e8a3.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\n\r\nfunction TodoItem(props) {\r\n  const [completed, setCompleted] = useState(false);\r\n  const [isBeingEdited, setBeingEdited] = useState(false);\r\n  const [newText, setNewText] = useState(props.task.text);\r\n\r\n  const inputRef = useRef(null);\r\n  const buttonRef = useRef(null);\r\n\r\n  function handleChange(e) {\r\n    setNewText(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.editTask(props.id, newText);\r\n    setNewText(newText)\r\n    setBeingEdited(false)\r\n  }\r\n\r\n    const displayTemplate = (\r\n      <div className=\"todoItem\">\r\n        <input type=\"checkbox\" checked={props.completed} onChange={() =>  props.toggleTaskCompleted(props.id)}/>\r\n        <p>{props.task.text}</p>\r\n        <button type=\"button\" onClick={() => props.deleteTask(props.id)}>x</button>\r\n        <button type=\"button\" onClick={() => setBeingEdited(true)} ref={buttonRef}>edit</button>\r\n      </div>\r\n    )\r\n    const editingTemplate = (\r\n      <div className=\"todoItem\">\r\n      <input\r\n        id={props.id}\r\n         type=\"text\"\r\n         defaultValue={props.task.text}\r\n         value={newText}\r\n         onChange={handleChange}\r\n         ref={inputRef}\r\n        />\r\n        <button type=\"submit\" onClick={handleSubmit}>save</button>\r\n        <button type=\"button\" onClick={() => setBeingEdited(false)}>cancel</button>\r\n      </div>\r\n    )\r\n\r\n    useEffect(() => {\r\n      if(isBeingEdited) {\r\n        inputRef.current.focus();\r\n      } else {\r\n        buttonRef.current.focus();\r\n      }\r\n    }, [isBeingEdited]);\r\n\r\n    return(isBeingEdited ? editingTemplate : displayTemplate)\r\n}\r\n\r\n\r\nexport default TodoItem\r\n","import React, { useState } from \"react\";\r\n\r\nfunction AddTodo(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  function handleChange(e) {\r\n    setText(e.target.value)\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    props.addTask(text)\r\n    setText(\"\")\r\n  }\r\n\r\n\r\n  return(\r\n    <div id=\"addTodo\">\r\n      <input type=\"text\" id=\"addTodo-input\" value={text} placeholder=\"Add new todo\" onChange={handleChange} />\r\n      <button type=\"submit\" id=\"addTodo-btn\" onClick={handleSubmit}>Add</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddTodo\r\n","import React from \"react\"\r\n\r\nfunction FilterBtn(props) {\r\n  return(\r\n    <button\r\n      type=\"button\"\r\n      className=\"filterBtn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n      >\r\n        <span>{props.name}</span>\r\n        <span> tasks</span>\r\n      </button>\r\n  )}\r\n\r\nexport default FilterBtn\r\n","import React, { useState } from \"react\"\nimport { nanoid } from \"nanoid\";\nimport './App.css';\nimport TodoItem from './TodoItem';\nimport AddTodo from \"./AddTodo\"\nimport FilterBtn from \"./FilterBtn\"\n\n\nfunction App(props) {\n  const [tasks, displayTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All')\n\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  }\n\n  const FILTER_NAMES = Object.keys(FILTER_MAP)\n\n  function toggleTaskCompleted(id) {\n    const tasksUpdated = tasks.map(task => {\n      if(id === task.id) {\n        return {...task, completed:!task.completed}\n      }\n      return task\n    })\n    displayTasks(tasksUpdated)\n  }\n\n  const todoItems = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => <TodoItem\n    task={task}\n    id={task.id}\n    completed={task.completed}\n    key={task.id}\n    deleteTask={deleteTask}\n    editTask={editTask}       toggleTaskCompleted={toggleTaskCompleted}\n  />);\n\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterBtn\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n      className=\"filterBtn\"\n    />\n  ));\n\n  function addTask(text) {\n    const newTodo = { id: \"item\" + nanoid(), text: text, completed: false };\n    displayTasks([...tasks, newTodo])\n  }\n\n  function deleteTask(id) {\n    const tasksRemaining = tasks.filter(task => id !==task.id)\n    displayTasks(tasksRemaining)\n  }\n\n  function editTask(id, newText) {\n    const todoItemsEdited = tasks.map(\n      task => {\n        if(id === task.id) {\n          return{...task, text: newText}\n        }\n        return task\n      }\n    )\n    displayTasks(todoItemsEdited)\n  }\n\n\n  return (\n    <>\n    <div className=\"todoList\">\n      {todoItems.length < 1 && <h2>You have nothing to do</h2>}\n      {todoItems}\n    </div>\n    <AddTodo addTask={addTask} />\n    <div className=\"filters\">\n      {filterList}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const todosData = [\r\n    {\r\n        id: 0,\r\n        text: \"Do the thing\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 1,\r\n        text: \"Get it done\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Complete it\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Start that stuff\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Finish the task\",\r\n        completed: false\r\n    }\r\n]\r\n\r\n\r\nexport default todosData\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport todosData from \"./todosData\"\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={todosData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}